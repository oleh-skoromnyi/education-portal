// <auto-generated />
using System;
using EducationPortal.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EducationPortal.DAL.Migrations
{
    [DbContext(typeof(EducationPortalDbContext))]
    partial class EducationPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sch")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EducationPortal.Core.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestItemId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EducationPortal.Core.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_Courses")
                        .IsClustered();

                    b.ToTable("Courses", "sch");
                });

            modelBuilder.Entity("EducationPortal.Core.CourseGivenSkill", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseGivenSkill");
                });

            modelBuilder.Entity("EducationPortal.Core.CourseMaterial", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("CourseMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.LearnedMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LearnedMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("Materials", "sch");
                });

            modelBuilder.Entity("EducationPortal.Core.RequirenmentSkill", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("RequirenmentSkill");
                });

            modelBuilder.Entity("EducationPortal.Core.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_Skills")
                        .IsClustered();

                    b.ToTable("Skills", "sch");
                });

            modelBuilder.Entity("EducationPortal.Core.TestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorrectAnswerIndex")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TestMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestMaterialId");

                    b.ToTable("TestItems");
                });

            modelBuilder.Entity("EducationPortal.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Phone")
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("PK_Users")
                        .IsClustered();

                    b.HasAlternateKey("Login")
                        .HasName("UK_Login");

                    b.ToTable("Users", "sch");
                });

            modelBuilder.Entity("EducationPortal.Core.UserCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourse");
                });

            modelBuilder.Entity("EducationPortal.Core.UserSkill", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkill");
                });

            modelBuilder.Entity("EducationPortal.Core.DigitalBookMaterial", b =>
                {
                    b.HasBaseType("EducationPortal.Core.Material");

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("int");

                    b.ToTable("DigitalBookMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.InternetArticleMaterial", b =>
                {
                    b.HasBaseType("EducationPortal.Core.Material");

                    b.Property<DateTime>("DateOfPublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinqToResource")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("InternetArticleMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.TestMaterial", b =>
                {
                    b.HasBaseType("EducationPortal.Core.Material");

                    b.ToTable("TestMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.VideoMaterial", b =>
                {
                    b.HasBaseType("EducationPortal.Core.Material");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VideoMaterial");
                });

            modelBuilder.Entity("EducationPortal.Core.Answer", b =>
                {
                    b.HasOne("EducationPortal.Core.TestItem", null)
                        .WithMany("Answers")
                        .HasForeignKey("TestItemId");
                });

            modelBuilder.Entity("EducationPortal.Core.CourseGivenSkill", b =>
                {
                    b.HasOne("EducationPortal.Core.Course", "Course")
                        .WithMany("GivenSkillList")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("EducationPortal.Core.CourseMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Course", "Course")
                        .WithMany("MaterialList")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EducationPortal.Core.LearnedMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.User", "User")
                        .WithMany("MaterialList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationPortal.Core.RequirenmentSkill", b =>
                {
                    b.HasOne("EducationPortal.Core.Course", "Course")
                        .WithMany("RequirementSkillList")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("EducationPortal.Core.TestItem", b =>
                {
                    b.HasOne("EducationPortal.Core.TestMaterial", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestMaterialId");
                });

            modelBuilder.Entity("EducationPortal.Core.UserCourse", b =>
                {
                    b.HasOne("EducationPortal.Core.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.User", "User")
                        .WithMany("CourseList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationPortal.Core.UserSkill", b =>
                {
                    b.HasOne("EducationPortal.Core.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortal.Core.User", "User")
                        .WithMany("SkillList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationPortal.Core.DigitalBookMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Core.DigitalBookMaterial", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Core.InternetArticleMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Core.InternetArticleMaterial", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Core.TestMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Core.TestMaterial", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Core.VideoMaterial", b =>
                {
                    b.HasOne("EducationPortal.Core.Material", null)
                        .WithOne()
                        .HasForeignKey("EducationPortal.Core.VideoMaterial", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortal.Core.Course", b =>
                {
                    b.Navigation("GivenSkillList");

                    b.Navigation("MaterialList");

                    b.Navigation("RequirementSkillList");
                });

            modelBuilder.Entity("EducationPortal.Core.TestItem", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EducationPortal.Core.User", b =>
                {
                    b.Navigation("CourseList");

                    b.Navigation("MaterialList");

                    b.Navigation("SkillList");
                });

            modelBuilder.Entity("EducationPortal.Core.TestMaterial", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
